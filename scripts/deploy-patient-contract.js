import 'dotenv/config';
import {
    Client,
    PrivateKey,
    AccountId,
    ContractCreateFlow,
    ContractFunctionParameters,
    Hbar,
    Status
} from "@hashgraph/sdk";
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import { compileAllContracts } from './compile.js';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

/**
 * D√©ployer le contrat PatientIdentity sur Hedera
 */
async function deployPatientContract() {
    try {
        console.log("üöÄ D√©marrage du d√©ploiement sur Hedera Testnet...\n");

        // V√©rification des variables d'environnement
        const operatorId = process.env.OPERATOR_ID;
        const operatorKey = process.env.OPERATOR_KEY;

        if (!operatorId || !operatorKey) {
            throw new Error("‚ùå Variables d'environnement manquantes (OPERATOR_ID ou OPERATOR_KEY)!");
        }

        console.log(`‚úÖ Operator ID: ${operatorId}`);

        // Configuration du client Hedera
        const operatorPrivateKey = PrivateKey.fromStringECDSA(operatorKey);
        const client = Client.forTestnet()
            .setOperator(operatorId, operatorPrivateKey)
            .setDefaultMaxTransactionFee(new Hbar(20)); // Augment√© pour les smart contracts
        
        console.log("‚úÖ Client Hedera connect√© au testnet");

        // Compilation du contrat si n√©cessaire
        console.log("\nüî® V√©rification de la compilation...");
        const compiledDir = path.join(__dirname, '..', 'contracts', 'compiled');
        const contractJsonPath = path.join(compiledDir, 'PatientIdentityContract.json');
        const bytecodePath = path.join(compiledDir, 'PatientIdentityContract_bytecode.bin');

        if (!fs.existsSync(contractJsonPath) || !fs.existsSync(bytecodePath)) {
            console.log("üìù Compilation des contrats...");
            await compileAllContracts();
        }

        // Lecture des donn√©es compil√©es
        if (!fs.existsSync(contractJsonPath)) {
            throw new Error(`‚ùå Fichier de contrat compil√© non trouv√©: ${contractJsonPath}`);
        }

        const contractData = JSON.parse(fs.readFileSync(contractJsonPath, 'utf8'));
        const bytecode = contractData.bytecode;

        if (!bytecode || bytecode.length === 0) {
            throw new Error("‚ùå Bytecode vide ou invalide");
        }

        console.log(`‚úÖ Contrat compil√© trouv√©`);
        console.log(`üìä Taille du bytecode: ${bytecode.length / 2} bytes`);

        // Pr√©paration du d√©ploiement
        console.log("\nüì§ Pr√©paration du d√©ploiement...");
        
        // Param√®tres du constructeur (aucun pour ce contrat)
        const constructorParams = new ContractFunctionParameters();

        // Cr√©ation du contrat
        console.log("‚è≥ Cr√©ation du contrat sur Hedera...");
        
        const contractCreateTx = new ContractCreateFlow()
            .setBytecode(`0x${bytecode}`)
            .setGas(5000000) // Gas suffisant pour le d√©ploiement
            .setConstructorParameters(constructorParams)
            .setMaxTransactionFee(new Hbar(20));

        // Ex√©cution de la transaction
        console.log("üîÑ Ex√©cution de la transaction de d√©ploiement...");
        const contractCreateSubmit = await contractCreateTx.execute(client);
        
        console.log("‚è≥ Attente du receipt...");
        const contractCreateRx = await contractCreateSubmit.getReceipt(client);
        
        if (contractCreateRx.status === Status.Success) {
            const contractId = contractCreateRx.contractId;
            const transactionId = contractCreateSubmit.transactionId;
            
            console.log(`\nüéâ SUCCESS! Contrat d√©ploy√© avec succ√®s!`);
            console.log(`üìã Contract ID: ${contractId}`);
            console.log(`üìã Transaction ID: ${transactionId}`);
            console.log(`üåê Explorer: https://hashscan.io/testnet/contract/${contractId}`);

            // Sauvegarder les informations de d√©ploiement
            const deploymentInfo = {
                contractName: 'PatientIdentityContract',
                contractId: contractId.toString(),
                transactionId: transactionId.toString(),
                deploymentDate: new Date().toISOString(),
                network: 'testnet',
                operatorId: operatorId,
                abi: contractData.abi,
                explorerUrl: `https://hashscan.io/testnet/contract/${contractId}`
            };

            const deploymentPath = path.join(__dirname, '..', 'contracts', 'deployed', 'PatientIdentityContract_deployment.json');
            const deployedDir = path.dirname(deploymentPath);
            
            if (!fs.existsSync(deployedDir)) {
                fs.mkdirSync(deployedDir, { recursive: true });
            }
            
            fs.writeFileSync(deploymentPath, JSON.stringify(deploymentInfo, null, 2));
            console.log(`‚úÖ Informations de d√©ploiement sauvegard√©es: ${deploymentPath}`);

            // Affichage des prochaines √©tapes
            console.log(`\nüìã Prochaines √©tapes:`);
            console.log(`1. Testez le contrat avec: node scripts/test-patient-contract.js`);
            console.log(`2. Cr√©ez le contrat AccessControl`);
            console.log(`3. Cr√©ez le contrat MedicalRecords`);

            client.close();
            return contractId;

        } else {
            throw new Error(`‚ùå D√©ploiement √©chou√© avec status: ${contractCreateRx.status}`);
        }

    } catch (error) {
        console.error("\n‚ùå Erreur lors du d√©ploiement:", error.message);
        
        if (error.status) {
            console.error(`üí° Status Hedera: ${error.status}`);
        }
        
        if (error.transactionId) {
            console.error(`üí° Transaction ID: ${error.transactionId}`);
            console.error(`üîç V√©rifiez sur: https://hashscan.io/testnet/transaction/${error.transactionId}`);
        }
        
        process.exit(1);
    }
}

// Fonction utilitaire pour v√©rifier le solde
async function checkBalance() {
    try {
        const operatorId = process.env.OPERATOR_ID;
        const operatorKey = process.env.OPERATOR_KEY;
        
        const operatorPrivateKey = PrivateKey.fromStringECDSA(operatorKey);
        const client = Client.forTestnet().setOperator(operatorId, operatorPrivateKey);
        
        const balance = await new AccountId(operatorId).getBalance(client);
        console.log(`üí∞ Solde actuel: ${balance.toString()}`);
        
        client.close();
        return balance;
    } catch (error) {
        console.error("‚ùå Erreur lors de la v√©rification du solde:", error.message);
    }
}

// Ex√©cuter le d√©ploiement si ce script est appel√© directement
if (import.meta.url === `file://${process.argv[1]}`) {
    console.log("üè• D√©ploiement du syst√®me m√©dical Hedera\n");
    
    // V√©rifier d'abord le solde
    await checkBalance();
    
    deployPatientContract().catch(console.error);
}

export { deployPatientContract, checkBalance };