// Test offline des logiques de contrats
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

/**
 * Tests offline - simulation des fonctions de contrat
 */
class OfflineContractSimulator {
    constructor() {
        this.patients = new Map();
        this.nextPatientId = 1;
        this.accessPermissions = new Map();
        this.medicalRecords = new Map();
    }

    // Simuler l'enregistrement patient
    registerPatient(patientAddress, encryptedData, metadataHash) {
        console.log(`üß™ [OFFLINE] Simulation registerPatient`);
        
        if (this.getPatientIdByAddress(patientAddress) !== 0) {
            throw new Error("Patient d√©j√† enregistr√©");
        }

        const patientId = this.nextPatientId;
        const patient = {
            patientId,
            encryptedPersonalData: encryptedData,
            patientAddress,
            isActive: true,
            creationDate: Date.now(),
            metadataHash
        };

        this.patients.set(patientId, patient);
        this.nextPatientId++;

        console.log(`‚úÖ Patient simul√© cr√©√© - ID: ${patientId}`);
        return patientId;
    }

    // Simuler l'acc√®s aux donn√©es
    getPatientInfo(patientId, requesterAddress) {
        console.log(`üß™ [OFFLINE] Simulation getPatientInfo`);
        
        const patient = this.patients.get(patientId);
        if (!patient || !patient.isActive) {
            throw new Error("Patient non trouv√© ou inactif");
        }

        // V√©rifier les permissions
        if (patient.patientAddress !== requesterAddress && 
            !this.checkAccess(patientId, requesterAddress)) {
            throw new Error("Acc√®s non autoris√©");
        }

        console.log(`‚úÖ Donn√©es patient r√©cup√©r√©es (simulation)`);
        return patient;
    }

    // Simuler l'octroi d'acc√®s
    grantAccess(patientId, authorizedAddress, granterAddress) {
        console.log(`üß™ [OFFLINE] Simulation grantAccess`);
        
        const patient = this.patients.get(patientId);
        if (!patient) {
            throw new Error("Patient non trouv√©");
        }

        if (patient.patientAddress !== granterAddress) {
            throw new Error("Seul le patient peut accorder l'acc√®s");
        }

        const permissionKey = `${patientId}-${authorizedAddress}`;
        this.accessPermissions.set(permissionKey, true);

        console.log(`‚úÖ Acc√®s accord√© (simulation)`);
        return true;
    }

    // V√©rifier l'acc√®s
    checkAccess(patientId, address) {
        const patient = this.patients.get(patientId);
        if (patient && patient.patientAddress === address) {
            return true;
        }

        const permissionKey = `${patientId}-${address}`;
        return this.accessPermissions.get(permissionKey) || false;
    }

    // Obtenir l'ID par adresse
    getPatientIdByAddress(address) {
        for (let [id, patient] of this.patients) {
            if (patient.patientAddress === address) {
                return id;
            }
        }
        return 0;
    }

    // Obtenir le nombre total
    getTotalPatients() {
        return this.nextPatientId - 1;
    }

    // Ajouter un dossier m√©dical
    addMedicalRecord(patientId, doctorAddress, encryptedDataHash, recordType) {
        console.log(`üß™ [OFFLINE] Simulation addMedicalRecord`);
        
        if (!this.patients.has(patientId)) {
            throw new Error("Patient non trouv√©");
        }

        const recordId = Date.now(); // Simple ID bas√© sur timestamp
        const record = {
            recordId,
            patientId,
            doctorAddress,
            encryptedDataHash,
            timestamp: Date.now(),
            recordType
        };

        if (!this.medicalRecords.has(patientId)) {
            this.medicalRecords.set(patientId, []);
        }

        this.medicalRecords.get(patientId).push(record);
        
        console.log(`‚úÖ Dossier m√©dical ajout√© (simulation) - Record ID: ${recordId}`);
        return recordId;
    }

    // Obtenir l'historique m√©dical
    getPatientHistory(patientId, requesterAddress) {
        console.log(`üß™ [OFFLINE] Simulation getPatientHistory`);
        
        if (!this.checkAccess(patientId, requesterAddress)) {
            throw new Error("Acc√®s non autoris√©");
        }

        const records = this.medicalRecords.get(patientId) || [];
        console.log(`‚úÖ Historique r√©cup√©r√© - ${records.length} enregistrement(s)`);
        return records;
    }
}

/**
 * S√©rie de tests offline
 */
async function runOfflineTests() {
    console.log("üöÄ D√©marrage des tests offline...\n");
    
    const simulator = new OfflineContractSimulator();
    
    try {
        // Test 1: √âtat initial
        console.log("üìä Test 1: √âtat initial");
        console.log(`Total patients: ${simulator.getTotalPatients()}`);
        console.log("‚úÖ Test 1 r√©ussi\n");

        // Test 2: Enregistrement patient
        console.log("üë§ Test 2: Enregistrement patient");
        const patientAddress = "0x123456789abcdef";
        const patientId = simulator.registerPatient(
            patientAddress,
            "encrypted_data_hash_123",
            "QmPatientMetadata123"
        );
        console.log(`Patient ID: ${patientId}`);
        console.log(`Total patients: ${simulator.getTotalPatients()}`);
        console.log("‚úÖ Test 2 r√©ussi\n");

        // Test 3: R√©cup√©ration info patient
        console.log("üìã Test 3: R√©cup√©ration informations patient");
        const patientInfo = simulator.getPatientInfo(patientId, patientAddress);
        console.log(`Donn√©es r√©cup√©r√©es: ${JSON.stringify(patientInfo, null, 2)}`);
        console.log("‚úÖ Test 3 r√©ussi\n");

        // Test 4: Gestion des acc√®s
        console.log("üîê Test 4: Gestion des acc√®s");
        const doctorAddress = "0xDOCTOR123456789";
        
        // Accorder l'acc√®s
        simulator.grantAccess(patientId, doctorAddress, patientAddress);
        
        // V√©rifier l'acc√®s
        const hasAccess = simulator.checkAccess(patientId, doctorAddress);
        console.log(`M√©decin a acc√®s: ${hasAccess}`);
        
        // Le m√©decin peut maintenant acc√©der aux donn√©es
        const patientInfoForDoctor = simulator.getPatientInfo(patientId, doctorAddress);
        console.log(`M√©decin peut acc√©der aux donn√©es: ${patientInfoForDoctor ? 'Oui' : 'Non'}`);
        console.log("‚úÖ Test 4 r√©ussi\n");

        // Test 5: Dossiers m√©dicaux
        console.log("üè• Test 5: Dossiers m√©dicaux");
        
        const recordId1 = simulator.addMedicalRecord(
            patientId,
            doctorAddress,
            "medical_record_hash_001",
            "consultation"
        );
        
        const recordId2 = simulator.addMedicalRecord(
            patientId,
            doctorAddress,
            "medical_record_hash_002",
            "prescription"
        );
        
        const history = simulator.getPatientHistory(patientId, patientAddress);
        console.log(`Nombre d'enregistrements m√©dicaux: ${history.length}`);
        console.log("‚úÖ Test 5 r√©ussi\n");

        // Test 6: Gestion des erreurs
        console.log("‚ö†Ô∏è Test 6: Gestion des erreurs");
        
        try {
            // Tenter d'enregistrer le m√™me patient
            simulator.registerPatient(patientAddress, "data", "metadata");
            console.log("‚ùå Test 6 √©chou√© - erreur non d√©tect√©e");
        } catch (error) {
            console.log(`‚úÖ Erreur correctement d√©tect√©e: ${error.message}`);
        }
        
        try {
            // Tenter l'acc√®s non autoris√©
            simulator.getPatientInfo(patientId, "0xUNAUTHORIZED");
            console.log("‚ùå Test 6 √©chou√© - acc√®s non autoris√© permis");
        } catch (error) {
            console.log(`‚úÖ Acc√®s non autoris√© correctement bloqu√©: ${error.message}`);
        }
        console.log("‚úÖ Test 6 r√©ussi\n");

        console.log("üéâ Tous les tests offline ont r√©ussi!");
        console.log("\nüìã R√©sum√© des fonctionnalit√©s test√©es:");
        console.log("- ‚úÖ Enregistrement des patients");
        console.log("- ‚úÖ R√©cup√©ration des donn√©es");
        console.log("- ‚úÖ Gestion des permissions");
        console.log("- ‚úÖ Dossiers m√©dicaux");
        console.log("- ‚úÖ Gestion des erreurs");
        
        console.log("\nüí° Pr√™t pour le d√©ploiement en ligne!");

    } catch (error) {
        console.error(`‚ùå Erreur dans les tests: ${error.message}`);
    }
    return true;
}

// Ex√©cuter les tests si appel√© directement
if (import.meta.url === `file://${process.argv[1]}`) {
    runOfflineTests().catch(console.error);
}

export { OfflineContractSimulator, runOfflineTests };