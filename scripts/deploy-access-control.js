import 'dotenv/config';
import {
    Client,
    PrivateKey,
    AccountId,
    ContractCreateFlow,
    ContractFunctionParameters,
    Hbar,
    Status
} from "@hashgraph/sdk";
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import { compileAllContracts } from './compile.js';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

/**
 * D√©ployer le contrat AccessControl sur Hedera
 */
async function deployAccessControlContract() {
    try {
        console.log("üöÄ D√©marrage du d√©ploiement AccessControl sur Hedera Testnet...\n");

        // Configuration du client
        const operatorId = process.env.OPERATOR_ID;
        const operatorKey = process.env.OPERATOR_KEY;

        if (!operatorId || !operatorKey) {
            throw new Error("‚ùå Variables d'environnement manquantes!");
        }

        console.log(`‚úÖ Operator ID: ${operatorId}`);

        const operatorPrivateKey = PrivateKey.fromStringECDSA(operatorKey);
        const client = Client.forTestnet()
            .setOperator(operatorId, operatorPrivateKey)
            .setDefaultMaxTransactionFee(new Hbar(20));
        
        console.log("‚úÖ Client Hedera connect√© au testnet");

        // V√©rifier que PatientIdentity est d√©j√† d√©ploy√©
        console.log("\nüîç V√©rification des d√©pendances...");
        const patientDeploymentPath = path.join(__dirname, '..', 'contracts', 'deployed', 'PatientIdentityContract_deployment.json');
        
        if (!fs.existsSync(patientDeploymentPath)) {
            throw new Error(`‚ùå PatientIdentityContract doit √™tre d√©ploy√© en premier!
            Ex√©cutez: node scripts/deploy-patient-contract.js`);
        }

        const patientDeployment = JSON.parse(fs.readFileSync(patientDeploymentPath, 'utf8'));
        const patientContractId = patientDeployment.contractId;
        console.log(`‚úÖ PatientIdentity trouv√©: ${patientContractId}`);

        // Compilation
        console.log("\nüî® V√©rification de la compilation...");
        const compiledDir = path.join(__dirname, '..', 'contracts', 'compiled');
        const contractJsonPath = path.join(compiledDir, 'AccessControlContract.json');

        if (!fs.existsSync(contractJsonPath)) {
            console.log("üìù Compilation des contrats...");
            await compileAllContracts();
        }

        // Lecture des donn√©es compil√©es
        if (!fs.existsSync(contractJsonPath)) {
            throw new Error(`‚ùå Fichier AccessControlContract.json non trouv√©`);
        }

        const contractData = JSON.parse(fs.readFileSync(contractJsonPath, 'utf8'));
        const bytecode = contractData.bytecode;

        console.log(`‚úÖ AccessControlContract compil√© trouv√©`);
        console.log(`üìä Taille du bytecode: ${bytecode.length / 2} bytes`);

        // Pr√©paration du d√©ploiement avec param√®tre constructeur
        console.log("\nüì§ Pr√©paration du d√©ploiement...");
        
        // Le constructeur prend l'adresse du contrat PatientIdentity
        const constructorParams = new ContractFunctionParameters()
            .addAddress(patientContractId); // Adresse du contrat Patient

        console.log(`üîó Lien avec PatientContract: ${patientContractId}`);

        // Cr√©ation du contrat
        console.log("‚è≥ Cr√©ation du contrat AccessControl...");
        
        const contractCreateTx = new ContractCreateFlow()
            .setBytecode(`0x${bytecode}`)
            .setGas(400000) // Plus de gas pour ce contrat plus complexe
            .setConstructorParameters(constructorParams)
            .setMaxTransactionFee(new Hbar(25));

        // Ex√©cution
        console.log("üîÑ Ex√©cution de la transaction de d√©ploiement...");
        const contractCreateSubmit = await contractCreateTx.execute(client);
        
        console.log("‚è≥ Attente du receipt...");
        const contractCreateRx = await contractCreateSubmit.getReceipt(client);
        
        if (contractCreateRx.status === Status.Success) {
            const contractId = contractCreateRx.contractId;
            const transactionId = contractCreateSubmit.transactionId;
            
            console.log(`\nüéâ SUCCESS! AccessControlContract d√©ploy√©!`);
            console.log(`üìã Contract ID: ${contractId}`);
            console.log(`üìã Transaction ID: ${transactionId}`);
            console.log(`üåê Explorer: https://hashscan.io/testnet/contract/${contractId}`);

            // Sauvegarder les informations de d√©ploiement
            const deploymentInfo = {
                contractName: 'AccessControlContract',
                contractId: contractId.toString(),
                transactionId: transactionId.toString(),
                deploymentDate: new Date().toISOString(),
                network: 'testnet',
                operatorId: operatorId,
                dependencies: {
                    patientIdentityContract: patientContractId
                },
                abi: contractData.abi,
                explorerUrl: `https://hashscan.io/testnet/contract/${contractId}`
            };

            const deploymentPath = path.join(__dirname, '..', 'contracts', 'deployed', 'AccessControlContract_deployment.json');
            fs.writeFileSync(deploymentPath, JSON.stringify(deploymentInfo, null, 2));
            console.log(`‚úÖ Infos sauvegard√©es: ${deploymentPath}`);

            // Affichage des prochaines √©tapes
            console.log(`\nüìã Prochaines √©tapes:`);
            console.log(`1. Testez: node scripts/test-access-control.js`);
            console.log(`2. Enregistrez des utilisateurs (m√©decins, etc.)`);
            console.log(`3. Cr√©ez le contrat MedicalRecords (Jour 5)`);

            console.log(`\nüìä Architecture actuelle:`);
            console.log(`   PatientIdentity: ${patientContractId}`);
            console.log(`   AccessControl:   ${contractId}`);

            client.close();
            return contractId;

        } else {
            throw new Error(`‚ùå D√©ploiement √©chou√©: ${contractCreateRx.status}`);
        }

    } catch (error) {
        console.error("\n‚ùå Erreur lors du d√©ploiement:", error.message);
        
        if (error.status) {
            console.error(`üí° Status Hedera: ${error.status}`);
        }
        
        if (error.transactionId) {
            console.error(`üí° Transaction ID: ${error.transactionId}`);
            console.error(`üîç V√©rifiez: https://hashscan.io/testnet/transaction/${error.transactionId}`);
        }
        
        process.exit(1);
    }
}

// D√©ployer les deux contrats en s√©quence si n√©cessaire
async function deployBothContracts() {
    console.log("üè• D√©ploiement complet du syst√®me m√©dical Hedera\n");
    
    try {
        // V√©rifier si PatientIdentity existe
        const patientDeploymentPath = path.join(__dirname, '..', 'contracts', 'deployed', 'PatientIdentityContract_deployment.json');
        
        if (!fs.existsSync(patientDeploymentPath)) {
            console.log("üìù PatientIdentity non trouv√©, d√©ploiement en cours...");
            const { deployPatientContract } = await import('./deploy-patient-contract.js');
            await deployPatientContract();
            console.log("‚úÖ PatientIdentity d√©ploy√©\n");
        }
        
        // D√©ployer AccessControl
        console.log("üìù D√©ploiement AccessControl...");
        await deployAccessControlContract();
        
        console.log("\nüéâ Syst√®me complet d√©ploy√©!");
        
    } catch (error) {
        console.error("‚ùå Erreur d√©ploiement complet:", error.message);
    }
}

// Ex√©cuter si appel√© directement
if (import.meta.url === `file://${process.argv[1]}`) {
    deployAccessControlContract().catch(console.error);
}

export { deployAccessControlContract, deployBothContracts };