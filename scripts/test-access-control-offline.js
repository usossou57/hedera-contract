import { OfflineContractSimulator } from './test-offline.js';

/**
 * Simulateur pour AccessControl
 */
class AccessControlSimulator {
    constructor() {
        this.users = new Map();
        this.permissions = new Map();
        this.accessLogs = new Map();
        this.nextPermissionId = 1;
        this.nextLogId = 1;
        
        // Roles enum simulation
        this.Role = {
            PATIENT: 0,
            DOCTOR: 1,
            ADMIN: 2,
            NURSE: 3,
            PHARMACIST: 4
        };
        
        // Cr√©er un admin par d√©faut
        this.users.set("0xADMIN123", {
            userAddress: "0xADMIN123",
            role: this.Role.ADMIN,
            isActive: true,
            publicKey: "admin_public_key",
            professionalId: "ADMIN_001",
            registrationDate: Date.now()
        });
        
        console.log("üè• AccessControl Simulator initialis√© avec admin par d√©faut");
    }
    
    /**
     * Enregistrer un utilisateur
     */
    registerUser(adminAddress, userAddress, role, publicKey, professionalId) {
        console.log(`üë§ [ACCESS] Enregistrement utilisateur: ${userAddress}`);
        
        // V√©rifier que l'admin existe
        const admin = this.users.get(adminAddress);
        if (!admin || admin.role !== this.Role.ADMIN) {
            throw new Error("Seul un admin peut enregistrer des utilisateurs");
        }
        
        // V√©rifier que l'utilisateur n'existe pas
        if (this.users.has(userAddress)) {
            throw new Error("Utilisateur d√©j√† enregistr√©");
        }
        
        const user = {
            userAddress,
            role,
            isActive: true,
            publicKey,
            professionalId,
            registrationDate: Date.now()
        };
        
        this.users.set(userAddress, user);
        console.log(`‚úÖ Utilisateur enregistr√© - R√¥le: ${this.getRoleName(role)}`);
        
        return true;
    }
    
    /**
     * Accorder une permission
     */
    grantPermission(grantorAddress, granteeAddress, patientId, expirationDate, allowedActions) {
        console.log(`üîê [ACCESS] Octroi permission: ${granteeAddress} -> Patient ${patientId}`);
        
        const grantor = this.users.get(grantorAddress);
        if (!grantor) {
            throw new Error("Utilisateur non enregistr√©");
        }
        
        const grantee = this.users.get(granteeAddress);
        if (!grantee) {
            throw new Error("B√©n√©ficiaire non enregistr√©");
        }
        
        if (expirationDate <= Date.now()) {
            throw new Error("Date d'expiration dans le pass√©");
        }
        
        const permissionId = this.nextPermissionId;
        const permission = {
            permissionId,
            grantor: grantorAddress,
            grantee: granteeAddress,
            patientId,
            expirationDate,
            isActive: true,
            allowedActions: [...allowedActions],
            creationDate: Date.now()
        };
        
        this.permissions.set(permissionId, permission);
        this.nextPermissionId++;
        
        console.log(`‚úÖ Permission accord√©e - ID: ${permissionId}, Actions: ${allowedActions.join(', ')}`);
        return permissionId;
    }
    
    /**
     * V√©rifier une permission
     */
    checkPermission(userAddress, patientId, action) {
        console.log(`üîç [ACCESS] V√©rification permission: ${userAddress} -> ${action} sur Patient ${patientId}`);
        
        const user = this.users.get(userAddress);
        if (!user || !user.isActive) {
            console.log("‚ùå Utilisateur non trouv√© ou inactif");
            return false;
        }
        
        // Admin a tous les droits
        if (user.role === this.Role.ADMIN) {
            console.log("‚úÖ Acc√®s admin accord√©");
            return true;
        }
        
        // Patient propri√©taire a tous les droits sur ses donn√©es
        // (Simulation - dans la r√©alit√© on appellerait PatientIdentity)
        if (this.isPatientOwner(patientId, userAddress)) {
            console.log("‚úÖ Acc√®s propri√©taire accord√©");
            return true;
        }
        
        // V√©rifier les permissions sp√©cifiques
        for (let [_, permission] of this.permissions) {
            if (permission.grantee === userAddress &&
                permission.patientId === patientId &&
                permission.isActive &&
                permission.expirationDate > Date.now()) {
                
                // V√©rifier si l'action est autoris√©e
                if (permission.allowedActions.includes(action) || 
                    permission.allowedActions.includes("*")) {
                    console.log("‚úÖ Permission sp√©cifique accord√©e");
                    return true;
                }
            }
        }
        
        console.log("‚ùå Acc√®s refus√©");
        return false;
    }
    
    /**
     * Logger un acc√®s
     */
    logAccess(accessor, patientId, action, success, details = "") {
        const logId = this.nextLogId;
        const log = {
            logId,
            accessor,
            patientId,
            action,
            timestamp: Date.now(),
            success,
            details
        };
        
        this.accessLogs.set(logId, log);
        this.nextLogId++;
        
        const status = success ? "‚úÖ SUCCESS" : "‚ùå FAILED";
        console.log(`üìù [LOG] ${status} - ${accessor} -> ${action} sur Patient ${patientId}`);
        
        return logId;
    }
    
    /**
     * R√©voquer une permission
     */
    revokePermission(revokerAddress, permissionId) {
        console.log(`üö´ [ACCESS] R√©vocation permission ID: ${permissionId}`);
        
        const permission = this.permissions.get(permissionId);
        if (!permission) {
            throw new Error("Permission inexistante");
        }
        
        const revoker = this.users.get(revokerAddress);
        if (!revoker) {
            throw new Error("Utilisateur non enregistr√©");
        }
        
        // V√©rifier les droits de r√©vocation
        if (permission.grantor !== revokerAddress && 
            revoker.role !== this.Role.ADMIN) {
            throw new Error("Non autoris√© √† r√©voquer cette permission");
        }
        
        permission.isActive = false;
        console.log(`‚úÖ Permission ${permissionId} r√©voqu√©e`);
        
        return true;
    }
    
    /**
     * Obtenir les informations d'un utilisateur
     */
    getUserInfo(userAddress) {
        const user = this.users.get(userAddress);
        if (!user) {
            throw new Error("Utilisateur non trouv√©");
        }
        return { ...user, roleName: this.getRoleName(user.role) };
    }
    
    /**
     * Obtenir toutes les permissions d'un utilisateur
     */
    getUserPermissions(userAddress) {
        const permissions = [];
        for (let [_, permission] of this.permissions) {
            if (permission.grantee === userAddress) {
                permissions.push(permission);
            }
        }
        return permissions;
    }
    
    /**
     * Utilitaires
     */
    getRoleName(role) {
        const roleNames = ["PATIENT", "DOCTOR", "ADMIN", "NURSE", "PHARMACIST"];
        return roleNames[role] || "UNKNOWN";
    }
    
    isPatientOwner(patientId, userAddress) {
        // Simulation simple - en r√©alit√© on appellerait PatientIdentityContract
        return userAddress === `0xPATIENT${patientId}`;
    }
    
    getStats() {
        const activeUsers = Array.from(this.users.values()).filter(u => u.isActive).length;
        const activePermissions = Array.from(this.permissions.values())
            .filter(p => p.isActive && p.expirationDate > Date.now()).length;
        
        return {
            totalUsers: this.users.size,
            activeUsers,
            totalPermissions: this.permissions.size,
            activePermissions,
            totalLogs: this.accessLogs.size
        };
    }
}

/**
 * Tests complets AccessControl
 */
async function testAccessControlSystem() {
    console.log("üöÄ Tests AccessControl System\n");
    
    const accessControl = new AccessControlSimulator();
    const patientSim = new OfflineContractSimulator();
    
    try {
        // Test 1: Enregistrement utilisateurs
        console.log("üë• Test 1: Enregistrement utilisateurs");
        
        const adminAddr = "0xADMIN123";
        const doctorAddr = "0xDOCTOR456";
        const nurseAddr = "0xNURSE789";
        const patientAddr = "0xPATIENT1";
        
        // Enregistrer m√©decin
        accessControl.registerUser(
            adminAddr, doctorAddr, 
            accessControl.Role.DOCTOR, 
            "doctor_public_key", 
            "DR001"
        );
        
        // Enregistrer infirmi√®re
        accessControl.registerUser(
            adminAddr, nurseAddr, 
            accessControl.Role.NURSE, 
            "nurse_public_key", 
            "NUR001"
        );
        
        console.log("‚úÖ Test 1 r√©ussi\n");
        
        // Test 2: Cr√©ation patient (via PatientIdentity simul√©)
        console.log("üë§ Test 2: Cr√©ation patient");
        
        const patientId = patientSim.registerPatient(
            patientAddr,
            "encrypted_medical_data",
            "patient_metadata_hash"
        );
        
        console.log("‚úÖ Test 2 r√©ussi\n");


        // Apr√®s la cr√©ation du patient
        accessControl.registerUser(
        adminAddr, patientAddr,
        accessControl.Role.PATIENT,
        "patient_public_key",
        "PAT001"
        );


        
        // Test 3: Octroi de permissions
        console.log("üîê Test 3: Octroi de permissions");

                
        const futureDate = Date.now() + (7 * 24 * 60 * 60 * 1000); // Dans 7 jours
        
        // Patient accorde acc√®s au m√©decin
        const permissionId1 = accessControl.grantPermission(
            patientAddr, // Le patient accorde
            doctorAddr,  // Au m√©decin
            patientId,
            futureDate,
            ["read", "write", "prescribe"]
        );
        
        // M√©decin accorde acc√®s limit√© √† l'infirmi√®re
        const permissionId2 = accessControl.grantPermission(
            doctorAddr,  // Le m√©decin accorde
            nurseAddr,   // √Ä l'infirmi√®re
            patientId,
            futureDate,
            ["read", "monitor"]
        );
        
        console.log("‚úÖ Test 3 r√©ussi\n");
        
        // Test 4: V√©rification des permissions
        console.log("üîç Test 4: V√©rification des permissions");
        
        // M√©decin peut lire
        const canDoctorRead = accessControl.checkPermission(doctorAddr, patientId, "read");
        console.log(`M√©decin peut lire: ${canDoctorRead}`);
        
        // M√©decin peut prescrire
        const canDoctorPrescribe = accessControl.checkPermission(doctorAddr, patientId, "prescribe");
        console.log(`M√©decin peut prescrire: ${canDoctorPrescribe}`);
        
        // Infirmi√®re peut lire
        const canNurseRead = accessControl.checkPermission(nurseAddr, patientId, "read");
        console.log(`Infirmi√®re peut lire: ${canNurseRead}`);
        
        // Infirmi√®re NE PEUT PAS prescrire
        const canNursePrescribe = accessControl.checkPermission(nurseAddr, patientId, "prescribe");
        console.log(`Infirmi√®re peut prescrire: ${canNursePrescribe} (devrait √™tre false)`);
        
        console.log("‚úÖ Test 4 r√©ussi\n");
        
        // Test 5: Logs d'acc√®s
        console.log("üìù Test 5: Logs d'acc√®s");
        
        accessControl.logAccess(doctorAddr, patientId, "read", true, "Consultation routine");
        accessControl.logAccess(nurseAddr, patientId, "read", true, "Prise de signes vitaux");
        accessControl.logAccess(nurseAddr, patientId, "prescribe", false, "Permission refus√©e");
        
        console.log("‚úÖ Test 5 r√©ussi\n");
        
        // Test 6: R√©vocation de permissions
        console.log("üö´ Test 6: R√©vocation de permissions");
        
        accessControl.revokePermission(doctorAddr, permissionId2); // M√©decin r√©voque acc√®s infirmi√®re
        
        // V√©rifier que l'acc√®s est maintenant refus√©
        const canNurseReadAfterRevoke = accessControl.checkPermission(nurseAddr, patientId, "read");
        console.log(`Infirmi√®re peut lire apr√®s r√©vocation: ${canNurseReadAfterRevoke} (devrait √™tre false)`);
        
        console.log("‚úÖ Test 6 r√©ussi\n");
        
        // Test 7: Statistiques du syst√®me
        console.log("üìä Test 7: Statistiques du syst√®me");
        
        const stats = accessControl.getStats();
        console.log(`üë• Utilisateurs actifs: ${stats.activeUsers}/${stats.totalUsers}`);
        console.log(`üîê Permissions actives: ${stats.activePermissions}/${stats.totalPermissions}`);
        console.log(`üìù Total logs: ${stats.totalLogs}`);
        
        console.log("‚úÖ Test 7 r√©ussi\n");
        
        console.log("üéâ Tous les tests AccessControl r√©ussis!");
        console.log("\nüìã R√©sum√© des fonctionnalit√©s test√©es:");
        console.log("- ‚úÖ Enregistrement d'utilisateurs (admin, m√©decin, infirmi√®re)");
        console.log("- ‚úÖ Octroi de permissions granulaires");
        console.log("- ‚úÖ V√©rification d'acc√®s par r√¥le et permission");
        console.log("- ‚úÖ Logs d'acc√®s d√©taill√©s");
        console.log("- ‚úÖ R√©vocation de permissions");
        console.log("- ‚úÖ Statistiques du syst√®me");
        
        return true;
        
    } catch (error) {
        console.error(`‚ùå Erreur dans les tests AccessControl: ${error.message}`);
        return false;
    }
}

// Ex√©cuter si appel√© directement
if (import.meta.url === `file://${process.argv[1]}`) {
    testAccessControlSystem().catch(console.error);
}

export { AccessControlSimulator, testAccessControlSystem };