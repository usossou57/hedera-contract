import { OfflineContractSimulator } from './test-offline.js';
import { AccessControlSimulator } from './test-access-control-offline.js';

/**
 * Simulateur pour MedicalRecordsContract
 */
class MedicalRecordsSimulator {
    constructor() {
        this.medicalRecords = new Map();
        this.patientRecords = new Map(); // Records par patient
        this.doctorRecords = new Map();  // Records par docteur
        this.recordAmendments = new Map();
        this.recordSignatures = new Map();
        this.usedHashes = new Set();
        this.patientAddresses = new Map(); // AJOUT: patientId -> patientAddress
        
        this.nextRecordId = 1;
        this.nextAmendmentId = 1;
        
        // √ânum√©rations
        this.RecordType = {
            CONSULTATION: 0,
            PRESCRIPTION: 1,
            TEST_RESULT: 2,
            SURGERY: 3,
            VACCINATION: 4,
            EMERGENCY: 5,
            FOLLOW_UP: 6,
            DISCHARGE_SUMMARY: 7
        };
        
        this.RecordStatus = {
            DRAFT: 0,
            FINALIZED: 1,
            AMENDED: 2,
            CANCELLED: 3
        };
        
        console.log("üè• MedicalRecords Simulator initialis√©");
    }
    
    /**
     * AJOUT: Enregistrer la correspondance patient ID <-> adresse
     */
    registerPatientAddress(patientId, patientAddress) {
        this.patientAddresses.set(patientId, patientAddress);
        console.log(`üìù [MEDICAL] Patient ${patientId} associ√© √† l'adresse ${patientAddress}`);
        return true;
    }
    
    /**
     * Cr√©er un nouvel enregistrement m√©dical
     */
    createMedicalRecord(
        patientId,
        doctorAddress,
        recordType,
        encryptedDataHash,
        originalDataHash,
        attachmentHashes = [],
        metadata = "",
        isEmergency = false
    ) {
        console.log(`üìù [MEDICAL] Cr√©ation enregistrement - Patient: ${patientId}, Type: ${this.getRecordTypeName(recordType)}`);
        
        // V√©rifications
        if (patientId <= 0) {
            throw new Error("ID patient invalide");
        }
        
        if (!encryptedDataHash || !originalDataHash) {
            throw new Error("Hashes des donn√©es requis");
        }
        
        // V√©rifier unicit√© du hash
        const hashKey = `${originalDataHash}-${patientId}`;
        if (this.usedHashes.has(hashKey)) {
            throw new Error("Enregistrement d√©j√† existant (hash dupliqu√©)");
        }
        
        const recordId = this.nextRecordId;
        const now = Date.now();
        
        const record = {
            recordId,
            patientId,
            doctorAddress,
            recordType,
            status: isEmergency ? this.RecordStatus.FINALIZED : this.RecordStatus.DRAFT,
            encryptedDataHash,
            originalDataHash,
            timestamp: now,
            lastModified: now,
            attachmentHashes: [...attachmentHashes],
            metadata,
            isEmergency,
            authorizedViewers: []
        };
        
        // Stocker l'enregistrement
        this.medicalRecords.set(recordId, record);
        
        // Ajouter aux index
        if (!this.patientRecords.has(patientId)) {
            this.patientRecords.set(patientId, []);
        }
        this.patientRecords.get(patientId).push(recordId);
        
        if (!this.doctorRecords.has(doctorAddress)) {
            this.doctorRecords.set(doctorAddress, []);
        }
        this.doctorRecords.get(doctorAddress).push(recordId);
        
        // Marquer le hash comme utilis√©
        this.usedHashes.add(hashKey);
        
        this.nextRecordId++;
        
        console.log(`‚úÖ Enregistrement cr√©√© - ID: ${recordId}${isEmergency ? ' (URGENCE)' : ''}`);
        
        if (isEmergency) {
            console.log(`üö® URGENCE: Enregistrement ${recordId} pour patient ${patientId}`);
        }
        
        return recordId;
    }
    
    /**
     * Amender un enregistrement
     */
    amendMedicalRecord(recordId, doctorAddress, newEncryptedDataHash, reason) {
        console.log(`üìù [MEDICAL] Amendement enregistrement ${recordId}`);
        
        const record = this.medicalRecords.get(recordId);
        if (!record) {
            throw new Error("Enregistrement inexistant");
        }
        
        if (record.doctorAddress !== doctorAddress) {
            throw new Error("Seul le m√©decin cr√©ateur peut amender");
        }
        
        if (record.status === this.RecordStatus.CANCELLED) {
            throw new Error("Impossible d'amender un enregistrement annul√©");
        }
        
        if (!reason) {
            throw new Error("Raison d'amendement requise");
        }
        
        const amendmentId = this.nextAmendmentId;
        const amendment = {
            amendmentId,
            originalRecordId: recordId,
            amendedBy: doctorAddress,
            reason,
            newEncryptedDataHash,
            amendmentDate: Date.now(),
            isActive: true
        };
        
        // Stocker l'amendement
        if (!this.recordAmendments.has(recordId)) {
            this.recordAmendments.set(recordId, []);
        }
        this.recordAmendments.get(recordId).push(amendment);
        
        // Mettre √† jour l'enregistrement
        record.encryptedDataHash = newEncryptedDataHash;
        record.status = this.RecordStatus.AMENDED;
        record.lastModified = Date.now();
        
        this.nextAmendmentId++;
        
        console.log(`‚úÖ Amendement cr√©√© - ID: ${amendmentId}, Raison: ${reason}`);
        return amendmentId;
    }
    
    /**
     * Finaliser un enregistrement
     */
    finalizeRecord(recordId, doctorAddress) {
        console.log(`‚úÖ [MEDICAL] Finalisation enregistrement ${recordId}`);
        
        const record = this.medicalRecords.get(recordId);
        if (!record) {
            throw new Error("Enregistrement inexistant");
        }
        
        if (record.doctorAddress !== doctorAddress) {
            throw new Error("Seul le cr√©ateur peut finaliser");
        }
        
        if (record.status !== this.RecordStatus.DRAFT) {
            throw new Error("Seuls les brouillons peuvent √™tre finalis√©s");
        }
        
        record.status = this.RecordStatus.FINALIZED;
        record.lastModified = Date.now();
        
        console.log(`‚úÖ Enregistrement ${recordId} finalis√©`);
        return true;
    }
    
    /**
     * Signer un enregistrement
     */
    signRecord(recordId, signerAddress, signature, signerRole) {
        console.log(`‚úçÔ∏è [MEDICAL] Signature enregistrement ${recordId} par ${signerRole}`);
        
        const record = this.medicalRecords.get(recordId);
        if (!record) {
            throw new Error("Enregistrement inexistant");
        }
        
        if (!signature || !signerRole) {
            throw new Error("Signature et r√¥le requis");
        }
        
        const digitalSignature = {
            signer: signerAddress,
            recordId,
            signature,
            signatureDate: Date.now(),
            signerRole
        };
        
        if (!this.recordSignatures.has(recordId)) {
            this.recordSignatures.set(recordId, []);
        }
        this.recordSignatures.get(recordId).push(digitalSignature);
        
        console.log(`‚úÖ Signature ajout√©e par ${signerRole}`);
        return true;
    }
    
    /**
     * Partager un enregistrement
     */
    shareRecord(recordId, sharerAddress, authorizedViewer) {
        console.log(`üîó [MEDICAL] Partage enregistrement ${recordId} avec ${authorizedViewer}`);
        
        const record = this.medicalRecords.get(recordId);
        if (!record) {
            throw new Error("Enregistrement inexistant");
        }
        
        // V√©rifier les droits de partage (patient ou m√©decin cr√©ateur)
        if (record.doctorAddress !== sharerAddress && !this.isPatientOwner(record.patientId, sharerAddress)) {
            throw new Error("Non autoris√© √† partager cet enregistrement");
        }
        
        // V√©rifier que l'utilisateur n'est pas d√©j√† autoris√©
        if (record.authorizedViewers.includes(authorizedViewer)) {
            throw new Error("Utilisateur d√©j√† autoris√©");
        }
        
        record.authorizedViewers.push(authorizedViewer);
        
        console.log(`‚úÖ Enregistrement partag√© avec ${authorizedViewer}`);
        return true;
    }
    
    /**
     * Obtenir un enregistrement m√©dical
     */
    getMedicalRecord(recordId, requesterAddress) {
        console.log(`üìã [MEDICAL] R√©cup√©ration enregistrement ${recordId}`);
        
        const record = this.medicalRecords.get(recordId);
        if (!record) {
            throw new Error("Enregistrement inexistant");
        }
        
        // V√©rifier les droits d'acc√®s
        if (!this.hasAccessToRecord(recordId, requesterAddress)) {
            throw new Error("Acc√®s non autoris√© √† cet enregistrement");
        }
        
        console.log(`‚úÖ Enregistrement r√©cup√©r√© - Type: ${this.getRecordTypeName(record.recordType)}`);
        return { ...record };
    }
    
    /**
     * Obtenir l'historique m√©dical d'un patient
     */
    getPatientHistory(patientId, requesterAddress) {
        console.log(`üìö [MEDICAL] Historique patient ${patientId}`);
        
        // V√©rifier les droits d'acc√®s
        if (!this.isPatientOwner(patientId, requesterAddress) && !this.isDoctorOrAuthorized(requesterAddress)) {
            throw new Error("Acc√®s non autoris√© √† l'historique");
        }
        
        const recordIds = this.patientRecords.get(patientId) || [];
        console.log(`‚úÖ Historique r√©cup√©r√© - ${recordIds.length} enregistrement(s)`);
        
        return recordIds;
    }
    
    /**
     * Obtenir les enregistrements par type
     */
    getRecordsByType(patientId, recordType, requesterAddress) {
        console.log(`üîç [MEDICAL] Recherche par type: ${this.getRecordTypeName(recordType)} pour patient ${patientId}`);
        
        if (!this.isPatientOwner(patientId, requesterAddress) && !this.isDoctorOrAuthorized(requesterAddress)) {
            throw new Error("Acc√®s non autoris√©");
        }
        
        const patientRecordIds = this.patientRecords.get(patientId) || [];
        const filteredRecords = patientRecordIds.filter(recordId => {
            const record = this.medicalRecords.get(recordId);
            return record && record.recordType === recordType;
        });
        
        console.log(`‚úÖ Trouv√© ${filteredRecords.length} enregistrement(s) de type ${this.getRecordTypeName(recordType)}`);
        return filteredRecords;
    }
    
    /**
     * Obtenir les enregistrements d'urgence
     */
    getEmergencyRecords(patientId, requesterAddress) {
        console.log(`üö® [MEDICAL] Enregistrements d'urgence pour patient ${patientId}`);
        
        const patientRecordIds = this.patientRecords.get(patientId) || [];
        const emergencyRecords = patientRecordIds.filter(recordId => {
            const record = this.medicalRecords.get(recordId);
            return record && record.isEmergency;
        });
        
        console.log(`‚úÖ Trouv√© ${emergencyRecords.length} enregistrement(s) d'urgence`);
        return emergencyRecords;
    }
    
    /**
     * V√©rifier l'int√©grit√© d'un enregistrement
     */
    verifyRecordIntegrity(recordId, originalHash) {
        const record = this.medicalRecords.get(recordId);
        if (!record) {
            return false;
        }
        
        const isValid = record.originalDataHash === originalHash;
        console.log(`üîç [MEDICAL] V√©rification int√©grit√© ${recordId}: ${isValid ? '‚úÖ VALIDE' : '‚ùå INVALIDE'}`);
        
        return isValid;
    }
    
    /**
     * Annuler un enregistrement
     */
    cancelRecord(recordId, doctorAddress, reason) {
        console.log(`üö´ [MEDICAL] Annulation enregistrement ${recordId}`);
        
        const record = this.medicalRecords.get(recordId);
        if (!record) {
            throw new Error("Enregistrement inexistant");
        }
        
        if (record.doctorAddress !== doctorAddress) {
            throw new Error("Seul le cr√©ateur peut annuler");
        }
        
        if (record.status === this.RecordStatus.CANCELLED) {
            throw new Error("Enregistrement d√©j√† annul√©");
        }
        
        if (!reason) {
            throw new Error("Raison d'annulation requise");
        }
        
        record.status = this.RecordStatus.CANCELLED;
        record.lastModified = Date.now();
        record.metadata = `${record.metadata} | CANCELLED: ${reason}`;
        
        console.log(`‚úÖ Enregistrement ${recordId} annul√© - Raison: ${reason}`);
        return true;
    }
    
    /**
     * Fonctions utilitaires
     */
    hasAccessToRecord(recordId, requesterAddress) {
        const record = this.medicalRecords.get(recordId);
        if (!record) return false;
        
        // Le m√©decin cr√©ateur a acc√®s
        if (record.doctorAddress === requesterAddress) return true;
        
        // Le patient propri√©taire a acc√®s
        if (this.isPatientOwner(record.patientId, requesterAddress)) return true;
        
        // Les viewers autoris√©s ont acc√®s
        if (record.authorizedViewers.includes(requesterAddress)) return true;
        
        return false;
    }
    
    /**
     * MODIFICATION: Version corrig√©e de isPatientOwner
     */
    isPatientOwner(patientId, address) {
        // V√©rifier d'abord dans notre map des adresses enregistr√©es
        const registeredAddress = this.patientAddresses.get(patientId);
        if (registeredAddress) {
            const isOwner = registeredAddress === address;
            console.log(`üîç [MEDICAL] V√©rification propri√©taire Patient ${patientId}: ${address} ${isOwner ? '==' : '!='} ${registeredAddress}`);
            return isOwner;
        }
        
        // Fallback vers l'ancienne logique pour compatibilit√©
        const fallbackResult = address === `0xPATIENT${patientId}`;
        console.log(`‚ö†Ô∏è [MEDICAL] Fallback propri√©taire Patient ${patientId}: ${address} ${fallbackResult ? '==' : '!='} 0xPATIENT${patientId}`);
        return fallbackResult;
    }
    
    isDoctorOrAuthorized(address) {
        // Simulation - en r√©alit√© on appellerait AccessControlContract
        return address.includes('DOCTOR') || address.includes('ADMIN');
    }
    
    getRecordTypeName(recordType) {
        const typeNames = [
            "CONSULTATION", "PRESCRIPTION", "TEST_RESULT", "SURGERY",
            "VACCINATION", "EMERGENCY", "FOLLOW_UP", "DISCHARGE_SUMMARY"
        ];
        return typeNames[recordType] || "UNKNOWN";
    }
    
    getStatusName(status) {
        const statusNames = ["DRAFT", "FINALIZED", "AMENDED", "CANCELLED"];
        return statusNames[status] || "UNKNOWN";
    }
    
    /**
     * Statistiques du syst√®me
     */
    getStats() {
        const totalRecords = this.medicalRecords.size;
        let emergencyRecords = 0;
        let cancelledRecords = 0;
        let amendedRecords = 0;
        let finalizedRecords = 0;
        
        for (let [_, record] of this.medicalRecords) {
            if (record.isEmergency) emergencyRecords++;
            if (record.status === this.RecordStatus.CANCELLED) cancelledRecords++;
            if (record.status === this.RecordStatus.AMENDED) amendedRecords++;
            if (record.status === this.RecordStatus.FINALIZED) finalizedRecords++;
        }
        
        return {
            totalRecords,
            totalAmendments: this.nextAmendmentId - 1,
            emergencyRecords,
            cancelledRecords,
            amendedRecords,
            finalizedRecords,
            totalSignatures: Array.from(this.recordSignatures.values())
                .reduce((sum, sigs) => sum + sigs.length, 0)
        };
    }
}

/**
 * Tests complets MedicalRecords
 */
async function testMedicalRecordsSystem() {
    console.log("üöÄ Tests MedicalRecords System\n");
    
    const medicalRecords = new MedicalRecordsSimulator();
    const patientSim = new OfflineContractSimulator();
    const accessControl = new AccessControlSimulator();
    
    try {
        // Setup initial
        console.log("üèóÔ∏è Setup initial du syst√®me");
        
        const patientAddr = "0xPATIENT1";
        const doctorAddr = "0xDOCTOR123";
        const nurseAddr = "0xNURSE456";
        const adminAddr = "0xADMIN123";
        
        // Cr√©er un patient
        const patientId = patientSim.registerPatient(
            patientAddr,
            "encrypted_patient_data",
            "patient_metadata"
        );
        
        // AJOUT: Enregistrer l'adresse du patient dans MedicalRecords
        medicalRecords.registerPatientAddress(patientId, patientAddr);
        
        // Enregistrer le m√©decin
        accessControl.registerUser(
            adminAddr, doctorAddr,
            accessControl.Role.DOCTOR,
            "doctor_key", "DR001"
        );
        
        console.log("‚úÖ Setup termin√©\n");
        
        // Test 1: Cr√©ation d'enregistrements m√©dicaux
        console.log("üìù Test 1: Cr√©ation d'enregistrements m√©dicaux");
        
        const consultationId = medicalRecords.createMedicalRecord(
            patientId,
            doctorAddr,
            medicalRecords.RecordType.CONSULTATION,
            "encrypted_consultation_data_hash",
            "original_consultation_hash",
            ["attachment1_hash", "attachment2_hash"],
            "Consultation de routine",
            false
        );
        
        const emergencyId = medicalRecords.createMedicalRecord(
            patientId,
            doctorAddr,
            medicalRecords.RecordType.EMERGENCY,
            "encrypted_emergency_data_hash",
            "original_emergency_hash",
            [],
            "Urgence - douleur thoracique",
            true
        );
        
        const prescriptionId = medicalRecords.createMedicalRecord(
            patientId,
            doctorAddr,
            medicalRecords.RecordType.PRESCRIPTION,
            "encrypted_prescription_data_hash",
            "original_prescription_hash",
            [],
            "Prescription post-consultation",
            false
        );
        
        console.log("‚úÖ Test 1 r√©ussi\n");
        
        // Test 2: Finalisation et signatures
        console.log("‚úçÔ∏è Test 2: Finalisation et signatures");
        
        // Finaliser la consultation
        medicalRecords.finalizeRecord(consultationId, doctorAddr);
        
        // Signer les enregistrements
        medicalRecords.signRecord(consultationId, doctorAddr, "doctor_signature_123", "DOCTOR");
        medicalRecords.signRecord(emergencyId, doctorAddr, "emergency_signature_456", "DOCTOR");
        
        console.log("‚úÖ Test 2 r√©ussi\n");
        
        // Test 3: Amendements
        console.log("üìù Test 3: Amendements");
        
        const amendmentId = medicalRecords.amendMedicalRecord(
            consultationId,
            doctorAddr,
            "updated_consultation_data_hash",
            "Ajout de r√©sultats de laboratoire"
        );
        
        console.log("‚úÖ Test 3 r√©ussi\n");
        
        // Test 4: Partage d'enregistrements
        console.log("üîó Test 4: Partage d'enregistrements");
        
        medicalRecords.shareRecord(consultationId, doctorAddr, nurseAddr);
        medicalRecords.shareRecord(prescriptionId, patientAddr, "0xPHARMACIST789");
        
        console.log("‚úÖ Test 4 r√©ussi\n");
        
        // Test 5: R√©cup√©ration d'enregistrements
        console.log("üìã Test 5: R√©cup√©ration d'enregistrements");
        
        // Patient r√©cup√®re ses donn√©es
        const consultationData = medicalRecords.getMedicalRecord(consultationId, patientAddr);
        console.log(`Consultation r√©cup√©r√©e: ${medicalRecords.getRecordTypeName(consultationData.recordType)}`);
        console.log(`Status: ${medicalRecords.getStatusName(consultationData.status)}`);
        
        // M√©decin r√©cup√®re l'urgence
        const emergencyData = medicalRecords.getMedicalRecord(emergencyId, doctorAddr);
        console.log(`Urgence r√©cup√©r√©e: ${emergencyData.isEmergency ? 'OUI' : 'NON'}`);
        
        // Infirmi√®re acc√®de aux donn√©es partag√©es
        const sharedData = medicalRecords.getMedicalRecord(consultationId, nurseAddr);
        console.log(`Donn√©es partag√©es accessibles: ${sharedData ? 'OUI' : 'NON'}`);
        
        console.log("‚úÖ Test 5 r√©ussi\n");
        
        // Test 6: Recherches sp√©cialis√©es
        console.log("üîç Test 6: Recherches sp√©cialis√©es");
        
        // Historique complet du patient
        const patientHistory = medicalRecords.getPatientHistory(patientId, patientAddr);
        console.log(`Historique patient: ${patientHistory.length} enregistrement(s)`);
        
        // Enregistrements par type
        const consultations = medicalRecords.getRecordsByType(
            patientId,
            medicalRecords.RecordType.CONSULTATION,
            doctorAddr
        );
        console.log(`Consultations: ${consultations.length}`);
        
        const prescriptions = medicalRecords.getRecordsByType(
            patientId,
            medicalRecords.RecordType.PRESCRIPTION,
            doctorAddr
        );
        console.log(`Prescriptions: ${prescriptions.length}`);
        
        // Enregistrements d'urgence
        const emergencies = medicalRecords.getEmergencyRecords(patientId, doctorAddr);
        console.log(`Urgences: ${emergencies.length}`);
        
        console.log("‚úÖ Test 6 r√©ussi\n");
        
        // Test 7: V√©rification d'int√©grit√©
        console.log("üîç Test 7: V√©rification d'int√©grit√©");
        
        const isValid = medicalRecords.verifyRecordIntegrity(
            consultationId,
            "original_consultation_hash"
        );
        console.log(`Int√©grit√© consultation: ${isValid ? 'VALIDE' : 'INVALIDE'}`);
        
        const isInvalid = medicalRecords.verifyRecordIntegrity(
            consultationId,
            "wrong_hash"
        );
        console.log(`Test hash incorrect: ${isInvalid ? 'INVALIDE (erreur!)' : 'INVALIDE (correct)'}`);
        
        console.log("‚úÖ Test 7 r√©ussi\n");
        
        // Test 8: Annulation d'enregistrement
        console.log("üö´ Test 8: Annulation d'enregistrement");
        
        medicalRecords.cancelRecord(
            prescriptionId,
            doctorAddr,
            "Prescription incorrecte - dosage erron√©"
        );
        
        console.log("‚úÖ Test 8 r√©ussi\n");
        
        // Test 9: Gestion des erreurs
        console.log("‚ö†Ô∏è Test 9: Gestion des erreurs");
        
        try {
            // Tenter de cr√©er un enregistrement avec un hash dupliqu√©
            medicalRecords.createMedicalRecord(
                patientId, doctorAddr,
                medicalRecords.RecordType.CONSULTATION,
                "encrypted_data", "original_consultation_hash", // Hash d√©j√† utilis√©
                [], "", false
            );
            console.log("‚ùå Test 9 √©chou√© - duplication non d√©tect√©e");
        } catch (error) {
            console.log(`‚úÖ Duplication correctement d√©tect√©e: ${error.message}`);
        }
        
        try {
            // Tenter d'acc√©der sans autorisation
            medicalRecords.getMedicalRecord(emergencyId, "0xUNAUTHORIZED");
            console.log("‚ùå Test 9 √©chou√© - acc√®s non autoris√© permis");
        } catch (error) {
            console.log(`‚úÖ Acc√®s non autoris√© correctement bloqu√©: ${error.message}`);
        }
        
        console.log("‚úÖ Test 9 r√©ussi\n");
        
        // Test 10: Statistiques finales
        console.log("üìä Test 10: Statistiques du syst√®me");
        
        const stats = medicalRecords.getStats();
        console.log(`üìã Total enregistrements: ${stats.totalRecords}`);
        console.log(`üìù Total amendements: ${stats.totalAmendments}`);
        console.log(`üö® Enregistrements d'urgence: ${stats.emergencyRecords}`);
        console.log(`‚ùå Enregistrements annul√©s: ${stats.cancelledRecords}`);
        console.log(`üìù Enregistrements amend√©s: ${stats.amendedRecords}`);
        console.log(`‚úÖ Enregistrements finalis√©s: ${stats.finalizedRecords}`);
        console.log(`‚úçÔ∏è Total signatures: ${stats.totalSignatures}`);
        
        console.log("‚úÖ Test 10 r√©ussi\n");
        
        console.log("üéâ Tous les tests MedicalRecords r√©ussis!");
        console.log("\nüìã R√©sum√© des fonctionnalit√©s test√©es:");
        console.log("- ‚úÖ Cr√©ation d'enregistrements m√©dicaux multiples");
        console.log("- ‚úÖ Finalisation et signatures num√©riques");
        console.log("- ‚úÖ Syst√®me d'amendements tra√ßables");
        console.log("- ‚úÖ Partage s√©curis√© d'enregistrements");
        console.log("- ‚úÖ R√©cup√©ration avec contr√¥le d'acc√®s");
        console.log("- ‚úÖ Recherches sp√©cialis√©es par type/urgence");
        console.log("- ‚úÖ V√©rification d'int√©grit√© des donn√©es");
        console.log("- ‚úÖ Annulation d'enregistrements");
        console.log("- ‚úÖ Gestion robuste des erreurs");
        console.log("- ‚úÖ Statistiques compl√®tes du syst√®me");
        
        return true;
        
    } catch (error) {
        console.error(`‚ùå Erreur dans les tests MedicalRecords: ${error.message}`);
        return false;
    }
}

// Ex√©cuter si appel√© directement
if (import.meta.url === `file://${process.argv[1]}`) {
    testMedicalRecordsSystem().catch(console.error);
}

export { MedicalRecordsSimulator, testMedicalRecordsSystem };