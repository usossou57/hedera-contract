import { OfflineContractSimulator, runOfflineTests } from './test-offline.js';
import { AccessControlSimulator, testAccessControlSystem } from './test-access-control-offline.js';
import { MedicalRecordsSimulator, testMedicalRecordsSystem } from './test-medical-records-offline.js';

/**
 * Test complet du syst√®me m√©dical int√©gr√©
 */
async function testCompleteSystemOffline() {
    console.log("üè• TEST COMPLET DU SYST√àME M√âDICAL HEDERA");
    console.log("=".repeat(60));
    console.log("üß™ Mode OFFLINE - Simulation compl√®te\n");
    
    const startTime = Date.now();
    let allTestsPassed = true;
    
    try {
        // PHASE 1: Test PatientIdentity
        console.log("üë§ PHASE 1/4: Test PatientIdentityContract");
        console.log("-".repeat(40));
        
        const patientTestResult = await runOfflineTests();
        if (!patientTestResult) {
            allTestsPassed = false;
            console.log("‚ùå PHASE 1 √âCHOU√âE\n");
        } else {
            console.log("‚úÖ PHASE 1 R√âUSSIE\n");
        }
        
        // PHASE 2: Test AccessControl
        console.log("üîê PHASE 2/4: Test AccessControlContract");
        console.log("-".repeat(40));
        
        const accessTestResult = await testAccessControlSystem();
        if (!accessTestResult) {
            allTestsPassed = false;
            console.log("‚ùå PHASE 2 √âCHOU√âE\n");
        } else {
            console.log("‚úÖ PHASE 2 R√âUSSIE\n");
        }
        
        // PHASE 3: Test MedicalRecords
        console.log("üè• PHASE 3/4: Test MedicalRecordsContract");
        console.log("-".repeat(40));
        
        const medicalTestResult = await testMedicalRecordsSystem();
        if (!medicalTestResult) {
            allTestsPassed = false;
            console.log("‚ùå PHASE 3 √âCHOU√âE\n");
        } else {
            console.log("‚úÖ PHASE 3 R√âUSSIE\n");
        }
        
        // PHASE 4: Test d'int√©gration compl√®te
        console.log("üîó PHASE 4/4: Test d'int√©gration syst√®me complet");
        console.log("-".repeat(40));
        
        const integrationTestResult = await testSystemIntegration();
        if (!integrationTestResult) {
            allTestsPassed = false;
            console.log("‚ùå PHASE 4 √âCHOU√âE\n");
        } else {
            console.log("‚úÖ PHASE 4 R√âUSSIE\n");
        }
        
        // R√âSULTATS FINAUX
        const endTime = Date.now();
        const duration = ((endTime - startTime) / 1000).toFixed(2);
        
        console.log("üèÅ R√âSULTATS FINAUX");
        console.log("=".repeat(60));
        
        if (allTestsPassed) {
            console.log("üéâ TOUS LES TESTS R√âUSSIS!");
            console.log("‚úÖ Syst√®me m√©dical complet valid√©");
            console.log("‚úÖ Pr√™t pour le d√©ploiement sur Hedera Testnet");
        } else {
            console.log("‚ùå CERTAINS TESTS ONT √âCHOU√â");
            console.log("‚ö†Ô∏è V√©rifiez les erreurs ci-dessus");
            console.log("üí° Corrigez les probl√®mes avant le d√©ploiement");
        }
        
        console.log(`‚è±Ô∏è Dur√©e totale des tests: ${duration}s`);
        
        // Statistiques g√©n√©rales
        console.log("\nüìä STATISTIQUES G√âN√âRALES:");
        console.log(`üë§ PatientIdentity: ${allTestsPassed ? '‚úÖ' : '‚ùå'} Test√©`);
        console.log(`üîê AccessControl: ${allTestsPassed ? '‚úÖ' : '‚ùå'} Test√©`);
        console.log(`üè• MedicalRecords: ${allTestsPassed ? '‚úÖ' : '‚ùå'} Test√©`);
        console.log(`üîó Int√©gration: ${allTestsPassed ? '‚úÖ' : '‚ùå'} Test√©e`);
        
        console.log("\nüöÄ PROCHAINES √âTAPES:");
        if (allTestsPassed) {
            console.log("1. Compiler tous les contrats: node scripts/compile.js");
            console.log("2. D√©ployer le syst√®me complet: node scripts/deploy-complete-system.js");
            console.log("3. Tester sur Hedera Testnet");
            console.log("4. Configurer les utilisateurs et permissions");
        } else {
            console.log("1. Corriger les erreurs d√©tect√©es");
            console.log("2. Relancer les tests: node scripts/test-complete-system-offline.js");
            console.log("3. Une fois tous les tests verts, proc√©der au d√©ploiement");
        }
        
        return allTestsPassed;
        
    } catch (error) {
        console.error(`‚ùå ERREUR CRITIQUE dans les tests du syst√®me: ${error.message}`);
        console.error(error.stack);
        return false;
    }
}

/**
 * Test d'int√©gration entre tous les contrats
 */
async function testSystemIntegration() {
    console.log("üîó Test d'int√©gration syst√®me complet\n");
    
    try {
        // Initialiser tous les simulateurs
        const patientSim = new OfflineContractSimulator();
        const accessSim = new AccessControlSimulator();
        const medicalSim = new MedicalRecordsSimulator();
        
        // Acteurs du syst√®me
        const adminAddr = "0xADMIN123";
        const doctorAddr = "0xDOCTOR456";
        const nurseAddr = "0xNURSE789";
        const pharmacistAddr = "0xPHARMACIST012";
        const patientAddr = "0xPATIENT1";
        const patient2Addr = "0xPATIENT678";
        
        console.log("üèóÔ∏è Sc√©nario d'int√©gration: Parcours patient complet");
        
        // √âTAPE 1: Configuration du syst√®me
        console.log("\n1Ô∏è‚É£ Configuration du syst√®me et utilisateurs");
        
        // Enregistrer les professionnels
        accessSim.registerUser(adminAddr, doctorAddr, accessSim.Role.DOCTOR, "doctor_key", "DR001");
        accessSim.registerUser(adminAddr, nurseAddr, accessSim.Role.NURSE, "nurse_key", "NUR001");
        accessSim.registerUser(adminAddr, pharmacistAddr, accessSim.Role.PHARMACIST, "pharm_key", "PH001");
        
        console.log("‚úÖ Professionnels enregistr√©s");
        
        // √âTAPE 2: Enregistrement patients
        console.log("\n2Ô∏è‚É£ Enregistrement des patients");
        
        const patient1Id = patientSim.registerPatient(
            patientAddr,
            "encrypted_patient1_data",
            "patient1_metadata"
        );
        
        const patient2Id = patientSim.registerPatient(
            patient2Addr,
            "encrypted_patient2_data", 
            "patient2_metadata"
        );
        
        console.log(`‚úÖ Patients enregistr√©s - IDs: ${patient1Id}, ${patient2Id}`);
        
        // √âTAPE 3: Gestion des permissions
        console.log("\n3Ô∏è‚É£ Configuration des permissions d'acc√®s");
        
        const futureDate = Date.now() + (30 * 24 * 60 * 60 * 1000); // Dans 30 jours
        
        // CORRECTION: Enregistrer les patients comme utilisateurs dans AccessControl d'abord
        accessSim.registerUser(adminAddr, patientAddr, accessSim.Role.PATIENT, "patient1_key", "PAT001");
        accessSim.registerUser(adminAddr, patient2Addr, accessSim.Role.PATIENT, "patient2_key", "PAT002");
        
        console.log("‚úÖ Patients enregistr√©s dans AccessControl");
        
        // Maintenant les patients peuvent accorder des permissions
        const permission1 = accessSim.grantPermission(
            patientAddr, doctorAddr, patient1Id, futureDate,
            ["read", "write", "prescribe", "diagnose"]
        );
        
        // M√©decin accorde acc√®s limit√© √† l'infirmi√®re
        const permission2 = accessSim.grantPermission(
            doctorAddr, nurseAddr, patient1Id, futureDate,
            ["read", "monitor", "vitals"]
        );
        
        // Patient 1 accorde acc√®s au pharmacien pour prescriptions
        const permission3 = accessSim.grantPermission(
            patientAddr, pharmacistAddr, patient1Id, futureDate,
            ["read_prescriptions", "dispense"]
        );
        
        console.log(`‚úÖ Permissions configur√©es - IDs: ${permission1}, ${permission2}, ${permission3}`);
        
        // √âTAPE 4: Consultation m√©dicale compl√®te
        console.log("\n4Ô∏è‚É£ Consultation m√©dicale compl√®te");
        
        // Consultation initiale
        const consultationId = medicalSim.createMedicalRecord(
            patient1Id, doctorAddr,
            medicalSim.RecordType.CONSULTATION,
            "encrypted_consultation_data",
            "consultation_hash_001",
            ["xray_hash", "blood_test_hash"],
            "Consultation - douleur abdominale",
            false
        );
        
        // R√©sultats de tests
        const testResultId = medicalSim.createMedicalRecord(
            patient1Id, doctorAddr,
            medicalSim.RecordType.TEST_RESULT,
            "encrypted_test_data",
            "test_hash_001",
            ["lab_report_hash"],
            "R√©sultats analyses sanguines",
            false
        );
        
        // Prescription
        const prescriptionId = medicalSim.createMedicalRecord(
            patient1Id, doctorAddr,
            medicalSim.RecordType.PRESCRIPTION,
            "encrypted_prescription_data",
            "prescription_hash_001",
            [],
            "Prescription - antibiotiques",
            false
        );
        
        console.log(`‚úÖ Dossiers cr√©√©s - Consultation: ${consultationId}, Test: ${testResultId}, Prescription: ${prescriptionId}`);
        
        // √âTAPE 5: Workflow de finalisation
        console.log("\n5Ô∏è‚É£ Workflow de finalisation et signatures");
        
        // Finaliser les enregistrements
        medicalSim.finalizeRecord(consultationId, doctorAddr);
        medicalSim.finalizeRecord(testResultId, doctorAddr);
        medicalSim.finalizeRecord(prescriptionId, doctorAddr);
        
        // Signatures num√©riques
        medicalSim.signRecord(consultationId, doctorAddr, "doctor_signature_consultation", "MEDICAL_DOCTOR");
        medicalSim.signRecord(prescriptionId, doctorAddr, "doctor_signature_prescription", "PRESCRIBING_DOCTOR");
        
        console.log("‚úÖ Enregistrements finalis√©s et sign√©s");
        
        // √âTAPE 6: Partage et acc√®s multi-utilisateurs
        console.log("\n6Ô∏è‚É£ Partage et acc√®s multi-utilisateurs");
        
        // Partager la consultation avec l'infirmi√®re
        medicalSim.shareRecord(consultationId, doctorAddr, nurseAddr);
        
        // Partager la prescription avec le pharmacien
        medicalSim.shareRecord(prescriptionId, patientAddr, pharmacistAddr);
        
        // Tests d'acc√®s
        const nurseCanRead = accessSim.checkPermission(nurseAddr, patient1Id, "read");
        const pharmacistCanDispense = accessSim.checkPermission(pharmacistAddr, patient1Id, "read_prescriptions");
        const unauthorizedAccess = accessSim.checkPermission("0xUNKNOWN", patient1Id, "read");
        
        console.log(`Infirmi√®re peut lire: ${nurseCanRead}`);
        console.log(`Pharmacien peut dispenser: ${pharmacistCanDispense}`);
        console.log(`Acc√®s non autoris√© bloqu√©: ${!unauthorizedAccess}`);
        
        if (!nurseCanRead || !pharmacistCanDispense || unauthorizedAccess) {
            throw new Error("Probl√®me dans la gestion des acc√®s");
        }
        
        console.log("‚úÖ Partage et contr√¥le d'acc√®s fonctionnels");
        
        // √âTAPE 7: Suivi et amendements
        console.log("\n7Ô∏è‚É£ Suivi m√©dical et amendements");
        
        // Suivi m√©dical
        const followUpId = medicalSim.createMedicalRecord(
            patient1Id, doctorAddr,
            medicalSim.RecordType.FOLLOW_UP,
            "encrypted_followup_data",
            "followup_hash_001",
            [],
            "Suivi post-traitement",
            false
        );
        
        // Amendement de la consultation (ajout d'informations)
        const amendmentId = medicalSim.amendMedicalRecord(
            consultationId, doctorAddr,
            "updated_consultation_data",
            "Ajout diagnostic diff√©rentiel"
        );
        
        console.log(`‚úÖ Suivi cr√©√©: ${followUpId}, Amendement: ${amendmentId}`);
        
        // √âTAPE 8: Situation d'urgence
        console.log("\n8Ô∏è‚É£ Gestion situation d'urgence");
        
        // Enregistrement d'urgence pour patient 2
        const emergencyId = medicalSim.createMedicalRecord(
            patient2Id, doctorAddr,
            medicalSim.RecordType.EMERGENCY,
            "encrypted_emergency_data",
            "emergency_hash_001",
            ["ecg_hash", "xray_emergency_hash"],
            "Urgence - infarctus suspect√©",
            true // Urgence = auto-finalis√©
        );
        
        // Log d'acc√®s d'urgence
        accessSim.logAccess(doctorAddr, patient2Id, "emergency_access", true, "Acc√®s urgence - infarctus");
        
        console.log(`‚úÖ Urgence g√©r√©e: ${emergencyId}`);
        
        // √âTAPE 9: Recherches et historiques
        console.log("\n9Ô∏è‚É£ Recherches et historiques m√©dicaux");
        
        // Historique patient 1
        const patient1History = medicalSim.getPatientHistory(patient1Id, patientAddr);
        console.log(`Historique patient 1: ${patient1History.length} enregistrements`);
        
        // Recherches sp√©cialis√©es
        const consultations = medicalSim.getRecordsByType(patient1Id, medicalSim.RecordType.CONSULTATION, doctorAddr);
        const prescriptions = medicalSim.getRecordsByType(patient1Id, medicalSim.RecordType.PRESCRIPTION, doctorAddr);
        const emergencies = medicalSim.getEmergencyRecords(patient2Id, doctorAddr);
        
        console.log(`Consultations patient 1: ${consultations.length}`);
        console.log(`Prescriptions patient 1: ${prescriptions.length}`);
        console.log(`Urgences patient 2: ${emergencies.length}`);
        
        console.log("‚úÖ Recherches et historiques fonctionnels");
        
        // √âTAPE 10: V√©rifications d'int√©grit√©
        console.log("\nüîü V√©rifications d'int√©grit√© et audit");
        
        // V√©rifier l'int√©grit√© des enregistrements
        const consultationIntegrity = medicalSim.verifyRecordIntegrity(consultationId, "consultation_hash_001");
        const prescriptionIntegrity = medicalSim.verifyRecordIntegrity(prescriptionId, "prescription_hash_001");
        
        console.log(`Int√©grit√© consultation: ${consultationIntegrity ? 'VALIDE' : 'INVALIDE'}`);
        console.log(`Int√©grit√© prescription: ${prescriptionIntegrity ? 'VALIDE' : 'INVALIDE'}`);
        
        if (!consultationIntegrity || !prescriptionIntegrity) {
            throw new Error("Probl√®me d'int√©grit√© des donn√©es");
        }
        
        // Statistiques finales
        const patientStats = patientSim.getTotalPatients();
        const accessStats = accessSim.getStats();
        const medicalStats = medicalSim.getStats();
        
        console.log("\nüìä Statistiques finales du syst√®me:");
        console.log(`üë• Patients enregistr√©s: ${patientStats}`);
        console.log(`üë§ Utilisateurs actifs: ${accessStats.activeUsers}`);
        console.log(`üîê Permissions actives: ${accessStats.activePermissions}`);
        console.log(`üìã Dossiers m√©dicaux: ${medicalStats.totalRecords}`);
        console.log(`üö® Dossiers d'urgence: ${medicalStats.emergencyRecords}`);
        console.log(`‚úçÔ∏è Signatures totales: ${medicalStats.totalSignatures}`);
        console.log(`üìù Amendements: ${medicalStats.totalAmendments}`);
        console.log(`üìä Logs d'acc√®s: ${accessStats.totalLogs}`);
        
        console.log("\n‚úÖ Test d'int√©gration R√âUSSI!");
        console.log("üéâ Syst√®me m√©dical complet valid√©!");
        
        // Tests de coh√©rence finale
        if (patientStats < 2) throw new Error("Nombre de patients incorrect");
        if (medicalStats.totalRecords < 5) throw new Error("Nombre d'enregistrements incorrect");
        if (accessStats.activePermissions < 3) throw new Error("Nombre de permissions incorrect");
        if (medicalStats.emergencyRecords < 1) throw new Error("Enregistrements d'urgence manquants");
        
        console.log("‚úÖ Tous les tests de coh√©rence r√©ussis!");
        
        return true;
        
    } catch (error) {
        console.error(`‚ùå Erreur dans le test d'int√©gration: ${error.message}`);
        return false;
    }
}

/**
 * Test de performance (simulation)
 */
async function testSystemPerformance() {
    console.log("\n‚ö° Test de performance du syst√®me");
    
    const medicalSim = new MedicalRecordsSimulator();
    const patientSim = new OfflineContractSimulator();
    
    // Cr√©er plusieurs patients
    console.log("üìà Cr√©ation de donn√©es de test en masse...");
    
    const startTime = Date.now();
    const patientsCount = 100;
    const recordsPerPatient = 10;
    
    for (let i = 1; i <= patientsCount; i++) {
        const patientAddr = `0xPATIENT${i.toString().padStart(3, '0')}`;
        const patientId = patientSim.registerPatient(
            patientAddr,
            `encrypted_data_${i}`,
            `metadata_${i}`
        );
        
        // Cr√©er plusieurs enregistrements par patient
        for (let j = 1; j <= recordsPerPatient; j++) {
            medicalSim.createMedicalRecord(
                patientId,
                "0xDOCTOR001",
                j % 4, // Rotation des types
                `encrypted_${i}_${j}`,
                `hash_${i}_${j}`,
                [],
                `Record ${j} for patient ${i}`,
                j % 10 === 0 // 10% d'urgences
            );
        }
    }
    
    const endTime = Date.now();
    const duration = endTime - startTime;
    const totalRecords = patientsCount * recordsPerPatient;
    
    console.log(`‚úÖ Performance test termin√©:`);
    console.log(`   üë• ${patientsCount} patients cr√©√©s`);
    console.log(`   üìã ${totalRecords} enregistrements cr√©√©s`);
    console.log(`   ‚è±Ô∏è Dur√©e: ${duration}ms`);
    console.log(`   üöÄ ${Math.round(totalRecords / (duration / 1000))} enregistrements/seconde`);
    
    return true;
}

// Ex√©cuter si appel√© directement
if (import.meta.url === `file://${process.argv[1]}`) {
    testCompleteSystemOffline().catch(console.error);
}

export { testCompleteSystemOffline, testSystemIntegration, testSystemPerformance };
